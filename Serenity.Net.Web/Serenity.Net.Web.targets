<Project>
  <PropertyGroup>
    <CompileTypeScriptDependsOn>
      RestoreTypings;
      $(CompileTypeScriptDependsOn)
    </CompileTypeScriptDependsOn>
  </PropertyGroup>
  <ItemGroup>
    <Content Remove="texts\resources\**\*.json" />
    <EmbeddedResource Include="texts\resources\**\*.json" WithCulture="false" Culture="" />
  </ItemGroup>  
  <Target Name="RestoreTypings"
          BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun"
          DependsOnTargets="$(ResolveStaticWebAssetsConfiguration);IncludeTransitiveProjectReferences"
          Condition="'$(RestoreTypings)' != 'false' And Exists('$(MSBuildProjectDirectory)\tsconfig.json')">
    <PropertyGroup>
      <RestoreTypings Condition="'$(RestoreTypings)' == '' And Exists('$(MSBuildProjectDirectory)\tsconfig.json') And (!Exists('$(MSBuildProjectDirectory)\tsbuild.js') Or Exists('$(MsBuildProjectDirectory)\Namespaces\tsconfig.json'))">true</RestoreTypings>
      <RestoreNodeTypes Condition="'$(RestoreNodeTypes)' == '' And Exists('$(MSBuildProjectDirectory)\tsconfig.json') And Exists('$(MSBuildProjectDirectory)\tsbuild.js')">true</RestoreNodeTypes>
    </PropertyGroup>
    <ItemGroup>
      <!--project reference typing, serenity.scripts -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\Serenity.CoreLib.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\Serenity.CoreLib.d.ts')">
        <TargetFile>typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- project reference typings all others -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\index.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(ProjectReference.Filename)' != '' And '%(ProjectReference.Filename)' != '$(ProjectName)' And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\index.d.ts')">
        <TargetFile>typings\%(ProjectReference.Filename)\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- nuget package typings from wwwroot -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)%(Filename).d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Project' And '%(Extension)' == '.js' And Exists('%(RootDir)%(Directory)%(Filename).d.ts') And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('wwwroot/'))">
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' != 'Serenity.Scripts'">typings\%(StaticWebAsset.SourceId)\index.d.ts</TargetFile>
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' == 'Serenity.Scripts'">typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- nuget package typings from typings\**\index.d.ts files -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)..\typings\**\index.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Package' And '%(Extension)' == '.js' And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('staticwebassets/'))">
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' != 'Serenity.Scripts'">typings\%(StaticWebAsset.SourceId)\index.d.ts</TargetFile>
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' == 'Serenity.Scripts'">typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- node modules mock types from project reference dist\index.d.ts files -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)dist\index.d.ts"
                        Condition="'$(RestoreNodeTypes)' == 'true' And '%(ProjectReference.Filename)' != '' And '%(ProjectReference.Filename)' != '$(ProjectName)' 
                        And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)dist\index.d.ts')
                        And !Exists(@(ProjectReference->'node_modules\%(Filename)\package.json'->Replace('Serenity.', '@serenity-is/')->ToLowerInvariant()))">
        <TargetFile>node_modules\@(ProjectReference->'%(Filename)'->Replace('Serenity.', '@serenity-is/')->ToLowerInvariant())\dist\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- node modules index.js script from project reference dist\index.js files -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)dist\index.js"
                        Condition="'$(RestoreNodeTypes)' == 'true' And '%(ProjectReference.Filename)' != '' And '%(ProjectReference.Filename)' != '$(ProjectName)' 
                        And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)dist\index.js')
                        And !Exists(@(ProjectReference->'node_modules\%(Filename)\package.json'->Replace('Serenity.', '@serenity-is/')->ToLowerInvariant()))">
        <TargetFile>node_modules\@(ProjectReference->'%(Filename)'->Replace('Serenity.', '@serenity-is/')->ToLowerInvariant())\dist\index.js</TargetFile>
      </_TypingToRestore>
      <!-- node modules mock types from package reference dist\index.d.ts files -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)..\dist\index.d.ts"
                        Condition="'$(RestoreNodeTypes)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Package' And '%(Extension)' == '.js' And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('staticwebassets/')) 
                        And Exists('%(StaticWebAsset.RootDir)%(StaticWebAsset.Directory)..\dist\index.d.ts')
                        And !Exists($([System.String]::Copy('node_modules\%(StaticWebAsset.SourceId)\package.json').Replace('Serenity.', '@serenity-is\').ToLowerInvariant()))">
        <TargetFile>node_modules\$([System.String]::Copy('%(StaticWebAsset.SourceId)').Replace('Serenity.', '@serenity-is\').ToLowerInvariant())\dist\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- node modules index.js script from package reference dist\index.js files -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)..\dist\index.js"
                        Condition="'$(RestoreNodeTypes)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Package' And '%(Extension)' == '.js' And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('staticwebassets/')) 
                        And Exists('%(StaticWebAsset.RootDir)%(StaticWebAsset.Directory)..\dist\index.js')
                        And !Exists($([System.String]::Copy('node_modules\%(StaticWebAsset.SourceId)\package.json').Replace('Serenity.', '@serenity-is\').ToLowerInvariant()))">
        <TargetFile>node_modules\$([System.String]::Copy('%(StaticWebAsset.SourceId)').Replace('Serenity.', '@serenity-is\').ToLowerInvariant())\dist\index.js</TargetFile>
      </_TypingToRestore>
    </ItemGroup>
    <Copy SourceFiles="@(_TypingToRestore)" DestinationFiles="@(_TypingToRestore->'%(TargetFile)'->ToLowerInvariant())" SkipUnchangedFiles="true" />
  </Target>
</Project>
