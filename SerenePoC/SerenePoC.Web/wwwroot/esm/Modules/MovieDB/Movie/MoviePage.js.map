{
  "version": 3,
  "sources": ["external-global:@serenity-is/extensions", "../../../../../Modules/MovieDB/Movie/MoviePage.ts", "../../../../../Modules/MovieDB/Movie/MovieGrid.ts", "../../../../../Modules/ServerTypes/Web/Modules.MovieDB.Movie.MovieKind.ts", "../../../../../Modules/ServerTypes/MovieDB/MovieColumns.ts", "../../../../../Modules/ServerTypes/MovieDB/MovieForm.ts", "../../../../../Modules/ServerTypes/MovieDB/MovieRow.ts", "../../../../../Modules/ServerTypes/MovieDB/MovieService.ts", "../../../../../Modules/MovieDB/Movie/MovieDialog.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", "\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { MovieGrid } from './MovieGrid';\r\n\r\nexport default function pageInit() {\r\n    initFullHeightGridPage(new MovieGrid($('#GridDiv')).element);\r\n}", "import { Decorators, EntityGrid, QuickSearchField } from '@serenity-is/corelib';\r\nimport { MovieColumns, MovieForm, MovieRow, MovieService } from '../../ServerTypes/MovieDB';\r\nimport { MovieDialog } from './MovieDialog';\r\nimport { ExcelExportHelper, PdfExportHelper, ReportHelper } from \"@serenity-is/extensions\";\n\r\n@Decorators.registerClass('SerenePoC.MovieDB.MovieGrid')\r\nexport class MovieGrid extends EntityGrid<MovieRow, any> {\r\n    protected getColumnsKey() { return MovieColumns.columnsKey; }\r\n    protected getDialogType() { return MovieDialog; }\r\n    protected getRowDefinition() { return MovieRow; }\r\n    protected getService() { return MovieService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\n\n    protected getQuickSearchFields(): QuickSearchField[] {\r\n        return [\r\n            { name: \"\", title: \"all\" },\r\n            { name: \"Description\", title: \"description\" },\r\n            { name: \"Storyline\", title: \"storyline\" },\r\n            { name: \"Year\", title: \"year\" }\r\n        ];\r\n    }\n\n    getButtons() {\n        var buttons = super.getButtons();\n        var myRow = MovieRow.Fields;\n\n        buttons.push(ExcelExportHelper.createToolButton({\n            grid: this,\n            service: MovieService.baseUrl + '/ListExcel',\n            onViewSubmit:() => this.onViewSubmit(),\n            separator: true\r\n        }));\n\n        return buttons;\r\n    }\r\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum MovieKind {\n    Film = 1,\n    TvSeries = 2,\n    MiniSeries = 3\n}\nDecorators.registerEnumType(MovieKind, 'SerenePoC.Web.Modules.MovieDB.Movie.MovieKind', 'MovieDB.MovieKind');", "\uFEFFimport { MovieKind } from \"../Web/Modules.MovieDB.Movie.MovieKind\";\n\nexport class MovieColumns {\n    static columnsKey = 'MovieDB.Movie';\n}\n\n[MovieKind]; // referenced types", "\uFEFFimport { StringEditor, TextAreaEditor, IntegerEditor, DateEditor, EnumEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { MovieKind } from \"../Web/Modules.MovieDB.Movie.MovieKind\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface MovieForm {\n    Title: StringEditor;\n    Description: TextAreaEditor;\n    Storyline: TextAreaEditor;\n    Year: IntegerEditor;\n    ReleaseDate: DateEditor;\n    Runtime: IntegerEditor;\n    Kind: EnumEditor;\n    GenreId: IntegerEditor;\n}\n\nexport class MovieForm extends PrefixedContext {\n    static formKey = 'MovieDB.Movie';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!MovieForm.init)  {\n            MovieForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = TextAreaEditor;\n            var w2 = IntegerEditor;\n            var w3 = DateEditor;\n            var w4 = EnumEditor;\n\n            initFormType(MovieForm, [\n                'Title', w0,\n                'Description', w1,\n                'Storyline', w1,\n                'Year', w2,\n                'ReleaseDate', w3,\n                'Runtime', w2,\n                'Kind', w4,\n                'GenreId', w2\n            ]);\n        }\n    }\n}\n\n[MovieKind]; // referenced types", "\uFEFFimport { MovieKind } from \"../Web/Modules.MovieDB.Movie.MovieKind\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface MovieRow {\n    MovieId?: number;\n    Title?: string;\n    Description?: string;\n    Storyline?: string;\n    Year?: number;\n    ReleaseDate?: string;\n    Runtime?: number;\n    Kind?: MovieKind;\n    GenreId?: number;\n    GenreName?: string;\n}\n\nexport abstract class MovieRow {\n    static readonly idProperty = 'MovieId';\n    static readonly nameProperty = 'Title';\n    static readonly localTextPrefix = 'MovieDB.Movie';\n    static readonly deletePermission = 'Administration:General';\n    static readonly insertPermission = 'Administration:General';\n    static readonly readPermission = 'Administration:General';\n    static readonly updatePermission = 'Administration:General';\n\n    static readonly Fields = fieldsProxy<MovieRow>();\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, ServiceRequest, serviceRequest } from \"@serenity-is/corelib/q\";\nimport { MovieRow } from \"./MovieRow\";\n\nexport namespace MovieService {\n    export const baseUrl = 'MovieDB/Movie';\n\n    export declare function Create(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<MovieRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MovieRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MovieRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function GetData(request: ServiceRequest, onSuccess?: (response: string) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"MovieDB/Movie/Create\",\n        Update: \"MovieDB/Movie/Update\",\n        Delete: \"MovieDB/Movie/Delete\",\n        Retrieve: \"MovieDB/Movie/Retrieve\",\n        List: \"MovieDB/Movie/List\",\n        GetData: \"MovieDB/Movie/GetData\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List', \n        'GetData'\n    ].forEach(x => {\n        (<any>MovieService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { MovieForm, MovieRow, MovieService } from '../../ServerTypes/MovieDB';\r\n\r\n@Decorators.registerClass('SerenePoC.MovieDB.MovieDialog')\r\nexport class MovieDialog extends EntityDialog<MovieRow, any> {\r\n    protected getFormKey() { return MovieForm.formKey; }\r\n    protected getRowDefinition() { return MovieRow; }\r\n    protected getService() { return MovieService.baseUrl; }\r\n\r\n    protected form = new MovieForm(this.idPrefix);\r\n}"],
  "mappings": "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",
  "names": ["require_extensions", "__commonJSMin", "exports", "module", "import_q", "import_corelib", "import_corelib", "MovieKind", "MovieColumns", "__name", "import_corelib", "import_q", "_MovieForm", "prefix", "w0", "w1", "w2", "w3", "w4", "MovieForm", "__name", "import_q", "MovieRow", "__name", "import_q", "MovieService", "x", "r", "s", "o", "import_corelib", "MovieDialog", "MovieForm", "MovieRow", "MovieService", "__name", "__decorateClass", "import_extensions", "MovieGrid", "MovieColumns", "MovieDialog", "MovieRow", "MovieService", "container", "buttons", "myRow", "__name", "__decorateClass", "pageInit", "MovieGrid", "__name"]
}
